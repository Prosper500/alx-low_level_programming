!<arch>
0-isupper.c/    0           0     0     644     220       `
#include "main.h"

/**
 * _isupper - identifing uppercase
 * @c: the checked character
 * Return: 1 if c is uppercase else return 0
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	return (1);
	else
	return (0);
}
0-memset.c/     0           0     0     644     286       `
#include "main.h"

/**
 * _memset - A function that fill a byte memory
 * @s: poiter destination
 * @b: byte constant
 * @n: byte to fill
 * Return: Character
 */

char *_memset(char *s, char b, unsigned int n)
{
	int i = 0;

	for (; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     357       `
#include "main.h"

/**
 * *_strcat - A function that link two string
 * @dest: A string variable
 * @src: Another string variable
 * Return: character
 */

char *_strcat(char *dest, char *src)
{
	int i = 0;
	int j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     455       `
#include "main.h"
#include <stdio.h>

/**
 * _atoi - function that convert a string to an integer.
 * @s: thw string to convert
 * Return: 0
 */
int _atoi(char *s)
{
	int c = 0;
	unsigned int ni = 0;
	int min = 1;
	int isi = 0;

	while (s[c])
	{
		if (s[c] == 45)
		{
			min *= -1;
		}
		while (s[c] >= 48 && s[c] <= 57)
		{
			isi = 1;
			ni = (ni * 10) + (s[c] - '0');
			c++;
		}
		if (isi == 1)
		{
			break;
		}
		c++;
	}
	ni *= min;
	return (ni);
}

1-isdigit.c/    0           0     0     644     241       `
#include "main.h"

/**
 * _isdigit - A function that check for a digit from 0 to 9
 * @c: the checked value
 * Return: 0 or1
 */

int _isdigit(int c)
{
	c = 0;
	if (c <= 9)
		return (1);
	else if (c = 'a' || c <= 'z')
		c++;
		return (0);
}

1-memcpy.c/     0           0     0     644     311       `
#include "main.h"

/**
 * _memcpy - A function that copy memory area
 * @dest: paste destinTion
 * @src: source memory
 * @n: byte volume
 * Return: value digit
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int i = n, r = 0;

	for (; r < i; r++)
	{
		dest[r] = src[r];
		n--;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     405       `
#include "main.h"
/**
 * *_strncat - A function that merge two strings
 * @dest: string to be merge to
 * @src: string merging to dest
 * @n: string array number
 * Return: character
 */
char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;
	while (dest[i] != '\0')
	{
	i++;
	}

	j = 0;
	while (j < n && src[j] != '\0')
	{
	dest[i] = src[j];
	i++;
	j++;
	}
	dest[i] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     296       `
#include "main.h"

/**
 * *_strchr - A function that locate charater to a string
 * @s: string destination
 * @c: character to be located
 *
 * Return: Always 0
 */

char *_strchr(char *s, char c)
{
	int i = 0;

	for (; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}
2-strlen.c/     0           0     0     644     264       `
#include <stdio.h>
#include "main.h"

/**
 * _strlen - A function that retuen the lenght value of a variable
 * @s: the checked string
 * Return: length
 */

int _strlen(char *s)
{
	int length = 0;

	while (*s != '\0')
	{
		length++;
		s++;
	}
	return (length);
}
2-strncpy.c/    0           0     0     644     360       `
#include "main.h"
/**
 * *_strncpy - function that copies strings
 * @dest: string destination
 * @src: source string
 * @n: number in array
 * Return: character
 */
char *_strncpy(char *dest, char *src, int n)
{
	int j;

	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[j] = src[j];
		j++;
	}
	while (j < n)
	{
		dest[j] = '\0';
		j++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     214       `
#include "main.h"
/**
 * _islower - A function that dictate a lowercase
 * @c: the character to be checked
 * Return: Always 0
 */

int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
	return (1);
	}
	return (0);
}
3-puts.c/       0           0     0     644     282       `
#include "main.h"
#include <unistd.h>
#include <stdio.h>

/**
 * _puts - A function that print string followed by a new line, to stdout
 * @str: the string to be printed
 * Return: void
 */

void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str++);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     313       `
#include "main.h"
/**
 * _strcmp - A function that compares strings
 * @s1: string variable 1
 * @s2: string variable 2
 * Return: 0
 */
int _strcmp(char *s1, char *s2)
{
	int j;

	j = 0;
	while (s1[j] != '\0' && s2[j] != '\0')
	{
		if (s1[j] != s2[j])
		{
			return (s1[j] - s2[j]);
		}
		j++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     407       `
#include "main.h"
/**
 * _strspn - A function that gets the length of a prefix substring.
 * @accept: input
 * @s: inputs
 * Return: int value
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int i = 0;
	int r;

	while (*s)
	{
		for (r = 0; accept[r]; r++)
		{
			if (*s == accept[r])
			{
				i++;
				break;
			}
			else if (accept[r + 1] == '\0')
				return (i);
		}
		s++;
	}
	return (i);
}

4-isalpha.c/    0           0     0     644     237       `
#include "main.h"
/**
 * _isalpha - function that checks for alphabetic character.
 * @c: the checked character
 * Return: 0
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 97) || (c >= 97 && c <= 122))
	{
	return (1);
	}
	return (0);
}

4-strpbrk.c/    0           0     0     644     326       `
#include "main.h"
/**
 * *_strpbrk - function that searches a string for any of a set of bytes.
 * @s: input
 * @accept: inputs
 *
 * Return: Always 0
 */

char *_strpbrk(char *s, char *accept)
{
	int j;

	while (*s)
	{
		for (j = 0; accept[j]; j++)
		{
			if (*s == accept[j])
				return (s);
		}
		s++;
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     411       `
#include "main.h"
#include <stddef.h>
/**
 * *_strstr- A funcrion that locate a substring
 * @haystack: inputs
 * @needle: input
 * Return: character
 */

char *_strstr(char *haystack, char *needle)
{

	for (; *haystack != '\0'; haystack++)
	{
	char *one = haystack;
	char *two = needle;

	while (*one == *two && *two != '\0')
	{
	one++;
	two++;
	}
	if (*two == '\0')
		return (haystack);
	}

	return (NULL);
}

6-abs.c/        0           0     0     644     236       `
#include "main.h"

/**
 * _abs - function that computes the absolute value of an integer.
 * @c: the number to be checked.
 * Return: 0
 */

int _abs(int c)
{
	if (c < 0)
	{
	int abs_val = c * -1;

	return (abs_val);
	}
	return (c);

}
9-strcpy.c/     0           0     0     644     318       `
#include <stdio.h>
#include "main.h"

/**
 * *_strcpy - A function that copies strings pointer
 * @dest: value to be printed
 * @src: the pointed string
 * Return: void
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i++] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     275       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}

